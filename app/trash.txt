

style="font-size: inherit; background-color: rgb(209, 0, 17); color: white; border: none;border-radius: 3px;cursor: pointer;">


// // Проверка email (можно добавить более строгую валидацию)
// if (email.trim() === "" || !email.includes("@")) {
//     document.getElementById('email-error').textContent = "Пожалуйста, введите корректный email.";
//     isValid = false;
// } else {
//     document.getElementById('email-error').textContent = "";
// }



        // Добавляем обработчик события для формы
        const form = document.querySelector('form');
        form.addEventListener('submit', (event) => {
            event.preventDefault(); // Предотвращаем стандартное поведение отправки формы

            // Проверка введенных данных (рекомендуется сделать на сервере)
            const username = document.getElementById('username').value;
            const password = document.getElementById('password').value;
            const passwordConfirm = document.getElementById('password-confirm').value;

            // Валидация введенных данных
            let isValid = true;
3
            // Проверка имени пользователя (можно добавить более строгую валидацию)
            if (username.trim() === "") {
                document.getElementById('username-error').textContent = "Пожалуйста, введите имя пользователя.";
                isValid = false;
            } else {
                document.getElementById('username-error').textContent = "";
            }

            // // Проверка email (можно добавить более строгую валидацию)
            // if (email.trim() === "" || !email.includes("@")) {
            //     document.getElementById('email-error').textContent = "Пожалуйста, введите корректный email.";
            //     isValid = false;
            // } else {
            //     document.getElementById('email-error').textContent = "";
            // }

            // Проверка пароля
            if (password.trim() === "" || password.length < 8) {
                document.getElementById('password-error').textContent = "Пароль должен быть не менее 8 символов.";
                isValid = false;
            } else {
                document.getElementById('password-error').textContent = "";
            }

            // Проверка подтверждения пароля
            if (passwordConfirm.trim() === "" || passwordConfirm !== password) {
                document.getElementById('password-confirm-error').textContent = "Пароли не совпадают.";
                isValid = false;
            } else {
                document.getElementById('password-confirm-error').textContent = "";
            }

            // Если форма прошла проверку, отправляем данные на сервер
            if (isValid) {
                // Отправка данных на сервер (замените это на реальную отправку)
                console.log("Форма отправлена");
            }
        });




// if (passwordOriginal != password_Confirm) {
//     const messageDiv = document.getElementById('message');
//     messageDiv.textContent = 'Произошла ошибка: ' + error;
// }


        <div class="form-group">
            <label for="password">Пароль:</label>
            <input class='password-original' type="password" id="password" name="password" required>
            <div class="error" id="password-error"></div>
        </div>

        <div class="form-group">
            <label for="password">Повторите пароль:</label>
            <input class="password-confirm" type="password" id="password" name="password" required>
            <div class="error" id="password-confirm-error"></div>
        </div>



"""@units_router.post(path='/create/')# full path = /api/v1/units/create/
def create_unit_point(request: Request, unit: unitCreateSchema):
    new_unit = unitModel(
        title=unit.title,
        description=unit.description,
    )
    session = Session(engine) # <- создаю сессию с БД
    session.add(new_unit) # <- записывает обьект в БД
    session.commit() # <- делает сохрание
    session.close() # <- закрывает сессию
    return {"unit": unit}

@units_router.get('/list/')
def list_units_point(request:Request):
    session = Session(engine)
    stmt = select(unitModel)
    print(stmt)

    SELECT units_table.id, units_table.title, units_table.description, units_table.status     
    FROM units_table

    units:list = session.scalars(stmt).all()
    return units
"""