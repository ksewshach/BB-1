

ФОРМА С ТОКЕНОМ: (MY_PROJECTS.HTML)
<div id='login_container' class='form-group' style='display:none; background-color: rgb(255, 255, 255);'>
        <h2>Новый проект</h2>
        <form id='new_project_form' action="/my_projects" method="post">
            <!-- {% csrf_token %} в Django необходимо добавлять CSRF-токен в формы, отправляемые методом POST
            С ЭТИМ РАЗБЕЛЕМСЯ ПОТОМ (ДОБАВИТЬ ВРУЧНУЮ НА СЕРВЕРЕ, СМ.ЧАТ)
            -->


НЕКОТОРЫЙ СИНТАКСИС Form(...)
(multipart/form-data - больше подходит когда нужно передать файлы, а более простой вариант будет всё-таки JSON)

@user_router.post('/my_projects/', response_model=ProjectCreateSchema)
def create_project(request: Request, title: str = Form(...), unit_titles: List[str] = Form(...), db: Session = Depends(get_db)):
    project = ProjectDB(title=title)
    # Создаём единицы
    for unit_title in unit_titles:
        unit = UnitDB(title=unit_title, project=project)
        db.add(unit)
        
    db.add(project)
    db.commit()
    db.refresh(project)
    return f'Создан проект с ID: {project.id}'







ОТПРАВКА НА СЕРВЕР: NEW PROJECT SCRIPT

if (isValid) {
    document.getElementById('new_project_form').addEventListener('submit', function(event) {
        event.preventDefault();
        const form = event.target;
        const formData = new FormData(form);
        const data = {};

        formData.forEach((value, key) => {
            data[key] = value;
        });

        fetch('http://127.0.0.1:8000/api/v1/users/create_unit/', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(data)
        })
        .then(response => response.json())
        .then(result => {
            const messageDiv = document.getElementById('message');
            messageDiv.textContent = result.message;
            if (result.success) {
                form.reset();
            }
        })
        .catch(error => {
            const messageDiv = document.getElementById('message');
            messageDiv.textContent = 'Произошла ошибка: ' + error;
        });
    });
        alert("Форма отправлена");
    }
    







@user_router.post('/create_project/')
def create_project(request: Request, title: str = Form(...), unit_titles: List[str] = Form(...), db: Session = Depends(get_db)):
    project = ProjectDB(title=title)
    # Создаём единицы
    for unit_title in unit_titles:
        unit = UnitDB(title=unit_title, project=project)
        db.add(unit)
        
    db.add(project)
    db.commit()
    db.refresh(project)
    return f'Создан проект с ID: {project.id}'









    # (...primary_key=True, index=True - индекс вроде для последующего поиска? Но времени и места тратится на него немало. Говорят.)

        /* const data = {"username": username, "password": password};
        fetch('http://127.0.0.1:8000/api/v1/users/register/', {
            method: "POST",
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(data)
        });
        // alert("Форма отправлена");
         */



  # Создаем нового пользователя
        new_user = User(
            username=user.username,
            password=user.password,  # TODO: Хэшировать пароль
            random_id=generate_random_id()
        )

        db.add(new_user)
        db.commit()
        db.refresh(new_user)  # Обновляем объект из базы данных
        return {"message": "Пользователь успешно зарегистрирован", "id": new_user.id, "username": new_user.username} # Возвращаем id




----------- УДАЛЯЛКА ТАБЛИЦЫ???
table_name = "_4789154_"
with engine.connect() as connection:
    connection.execute(f"DROP TABLE IF EXISTS {table_name};")



    session = Session(engine)
    new_project = UserDB(
        username = project.username,
        password = project.password,
    )
    session.add(new_project)
    session.commit()
    session.close()



---------------- СОЗДАВАЛКА ТАБЛИЦЫ --------------------------------/

conn = sqlite3.connect('db.sqlite')
cursor = conn.cursor()
cursor.execute('''
                CREATE TABLE users (
                    reg_number INTEGER PRIMARY KEY,
                    id INTEGER NOT NULL,
                    username TEXT NOT NULL,
                    password TEXT NOT NULL
                    
                )
            ''')
conn.commit()
conn.close()

---------------- СОЗДАВАЛКА ТАБЛИЦЫ --------------------------------/



// Если форма прошла проверку, отправляем данные на сервер
if (isValid) {
    document.getElementById('registrationForm').addEventListener('submit', function(event) {
        event.preventDefault();
        const form = event.target;
        const formData = new FormData(form);
        const data = {};
        
        alert(data)

        formData.forEach((value, key) => {
            data[key] = value;
        });

        fetch('/api/v1/users/register', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(data)
        })
        .then(response => response.json())
        .then(result => {
            const messageDiv = document.getElementById('message');
            messageDiv.textContent = result.message;
            if (result.success) {
                form.reset();
            }
        })
        .catch(error => {
            const messageDiv = document.getElementById('message');
            messageDiv.textContent = 'Произошла ошибка: ' + error;
        });
    });
        alert("Форма отправлена");
}else {
    event.preventDefault();
    alert('Поздравляем, вы бубун.')
}

*/

""" sqlalchemy.exc.IntegrityError: (sqlite3.IntegrityError) UNIQUE constraint failed: users.id
[SQL: INSERT INTO users (id, username, password) VALUES (?, ?, ?)]
[parameters: (0, 'Ксюша', '12345')]
(Background on this error at: https://sqlalche.me/e/20/gkpj) """
# sqlite3.IntegrityError: UNIQUE constraint failed: users.id
# 127.0.0.1:61671 - "←[1mPOST /api/v1/users/register/ HTTP/1.1←[0m" ←[91m500 Internal Server Error←[0m











primary_key=True, autoincrement=True


 if session.query(UserDB).filter(UserDB.id == user_id).first() is None:
    

primary_key=True, autoincrement=False

     
    def generate_random_id():
        """Функция, которая возвращает случайный id."""
        import random
        return random.randint(1000, 9999)

    def create_user(username, password):
       # 1. Получение ID
        user_id = generate_random_id()

       # 2. Присваивание значения параметру id, и, одновременно, использование переменной:
        user = {"id": user_id, "username": username, "password": password}

        return user
    

     def generate_random_id():
    """Функция, которая возвращает случайный id."""
    import random
    return random.randint(1000, 9999)

def create_user(username, password):
    # 1. Получение ID
    user_id = generate_random_id()

    # 2. Использование переменной: присваиваем значение id параметру
    user = {"id": user_id, "username": username, "password": password}

    # ... далее мы делаем что-то с этим словарем user

    return user

# Пример вызова:
new_user = create_user("testuser", "testpass")
print(new_user)
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
        # reg_number = user.reg_number,


@user_router.post('/register/')
def create_user(request: Request, user: UserCreateSchema):
    new_user = UserDB(
        reg_number = user.reg_number,
        username = user.username,
        password = user.password,
        id = user.id,
    )
    session = Session(engine)
    session.add(new_user)
    # stmt = insert(UserDB).values(username=user.username,
    #                                  password=user.password,
    #                                  id=user.id)
    # session.execute(stmt)
    session.commit()
    session.close()
    return {'user': user}



style="font-size: inherit; background-color: rgb(209, 0, 17); color: white; border: none;border-radius: 3px;cursor: pointer;">


// // Проверка email (можно добавить более строгую валидацию)
// if (email.trim() === "" || !email.includes("@")) {
//     document.getElementById('email-error').textContent = "Пожалуйста, введите корректный email.";
//     isValid = false;
// } else {
//     document.getElementById('email-error').textContent = "";
// }



        // Добавляем обработчик события для формы
        const form = document.querySelector('form');
        form.addEventListener('submit', (event) => {
            event.preventDefault(); // Предотвращаем стандартное поведение отправки формы

            // Проверка введенных данных (рекомендуется сделать на сервере)
            const username = document.getElementById('username').value;
            const password = document.getElementById('password').value;
            const passwordConfirm = document.getElementById('password-confirm').value;

            // Валидация введенных данных
            let isValid = true;
3
            // Проверка имени пользователя (можно добавить более строгую валидацию)
            if (username.trim() === "") {
                document.getElementById('username-error').textContent = "Пожалуйста, введите имя пользователя.";
                isValid = false;
            } else {
                document.getElementById('username-error').textContent = "";
            }

            // // Проверка email (можно добавить более строгую валидацию)
            // if (email.trim() === "" || !email.includes("@")) {
            //     document.getElementById('email-error').textContent = "Пожалуйста, введите корректный email.";
            //     isValid = false;
            // } else {
            //     document.getElementById('email-error').textContent = "";
            // }

            // Проверка пароля
            if (password.trim() === "" || password.length < 8) {
                document.getElementById('password-error').textContent = "Пароль должен быть не менее 8 символов.";
                isValid = false;
            } else {
                document.getElementById('password-error').textContent = "";
            }

            // Проверка подтверждения пароля
            if (passwordConfirm.trim() === "" || passwordConfirm !== password) {
                document.getElementById('password-confirm-error').textContent = "Пароли не совпадают.";
                isValid = false;
            } else {
                document.getElementById('password-confirm-error').textContent = "";
            }

            // Если форма прошла проверку, отправляем данные на сервер
            if (isValid) {
                // Отправка данных на сервер (замените это на реальную отправку)
                console.log("Форма отправлена");
            }
        });




// if (passwordOriginal != password_Confirm) {
//     const messageDiv = document.getElementById('message');
//     messageDiv.textContent = 'Произошла ошибка: ' + error;
// }


        <div class="form-group">
            <label for="password">Пароль:</label>
            <input class='password-original' type="password" id="password" name="password" required>
            <div class="error" id="password-error"></div>
        </div>

        <div class="form-group">
            <label for="password">Повторите пароль:</label>
            <input class="password-confirm" type="password" id="password" name="password" required>
            <div class="error" id="password-confirm-error"></div>
        </div>



"""@units_router.post(path='/create/')# full path = /api/v1/units/create/
def create_unit_point(request: Request, unit: unitCreateSchema):
    new_unit = unitModel(
        title=unit.title,
        description=unit.description,
    )
    session = Session(engine) # <- создаю сессию с БД
    session.add(new_unit) # <- записывает обьект в БД
    session.commit() # <- делает сохрание
    session.close() # <- закрывает сессию
    return {"unit": unit}

@units_router.get('/list/')
def list_units_point(request:Request):
    session = Session(engine)
    stmt = select(unitModel)
    print(stmt)

    SELECT units_table.id, units_table.title, units_table.description, units_table.status     
    FROM units_table

    units:list = session.scalars(stmt).all()
    return units
"""